return Card(
                    margin: const EdgeInsets.only(bottom: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    elevation: 2,
                    child: Padding(
                      padding: const EdgeInsets.all(12),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Product image
                              ClipRRect(
                                borderRadius: BorderRadius.circular(8),
                                child: Image.network(
                                  product['gambar_produk'] ?? '',
                                  width: 70,
                                  height: 70,
                                  fit: BoxFit.cover,
                                  errorBuilder: (context, error, stackTrace) {
                                    return Container(
                                      width: 70,
                                      height: 70,
                                      color: Colors.grey[300],
                                      child: const Icon(Icons.image_not_supported, color: Colors.grey),
                                    );
                                  },
                                ),
                              ),
                              const SizedBox(width: 12),

                              // Product details
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    // Product name and delete button in a row
                                    Row(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        // Product name - limited to one line
                                        Expanded(
                                          child: Text(
                                            product['nama_produk'] ?? '',
                                            style: const TextStyle(
                                              fontSize: 15,
                                              fontWeight: FontWeight.bold,
                                            ),
                                            maxLines: 1,
                                            overflow: TextOverflow.ellipsis,
                                          ),
                                        ),

                                        // Delete button aligned with product name
                                        IconButton(
                                          onPressed: () => _showDeleteConfirmation(context, cartId),
                                          icon: Icon(
                                            Icons.delete_outline,
                                            color: Colors.red[400],
                                            size: 22,
                                          ),
                                          padding: EdgeInsets.zero,
                                          constraints: const BoxConstraints(),
                                        ),
                                      ],
                                    ),

                                    const SizedBox(height: 4),

                                    // Price
                                    Text(
                                      'Rp ${_formatPrice(price)}',
                                      style: TextStyle(
                                        fontSize: 14,
                                        fontWeight: FontWeight.w600,
                                        color: appTheme.orange200,
                                      ),
                                    ),

                                    const SizedBox(height: 8),

                                    // Quantity input field
                                    Container(
                                      width: 40,
                                      margin: const EdgeInsets.symmetric(horizontal: 8),
                                      child: TextField(
                                        controller: quantityControllers[cartId],
                                        keyboardType: TextInputType.number,
                                        textAlign: TextAlign.center,
                                        onChanged: (value) {
                                          final newQty = int.tryParse(value) ?? 0;
                                          if (newQty > 0) {
                                            updateQuantity(cartId, newQty, maxStock);
                                          }
                                        },
                                        decoration: InputDecoration(
                                          contentPadding: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),
                                          border: const OutlineInputBorder(),
                                          enabledBorder: OutlineInputBorder(
                                            borderSide: BorderSide(color: appTheme.lightGrey), // warna abu-abu saat tidak fokus
                                          ),
                                          focusedBorder: OutlineInputBorder(
                                            borderSide: BorderSide(color: appTheme.lightGrey, width: 2.0), // warna abu-abu saat fokus
                                          ),
                                        ),
                                      ),
                                    ),

                                    InkWell(
                                      onTap: () {
                                        final currentQty = int.tryParse(quantityControllers[cartId]?.text ?? "1") ?? 1;
                                        if (currentQty < maxStock) {
                                          quantityControllers[cartId]?.text = (currentQty + 1).toString();
                                          updateQuantity(cartId, currentQty + 1, maxStock);
                                        }
                                      },
                                      child: Container(
                                        padding: const EdgeInsets.all(4),
                                        decoration: BoxDecoration(
                                          border: Border.all(color: Colors.grey.shade300),
                                          borderRadius: BorderRadius.circular(4),
                                        ),
                                        child: const Icon(Icons.add, size: 16),
                                      ),
                                    ),

                                        // Subtotal aligned with quantity input
                                        Text(
                                          'Rp ${_formatPrice(price * quantity)}',
                                          style: TextStyle(
                                            fontSize: 14,
                                            fontWeight: FontWeight.w600,
                                            color: appTheme.orange200,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ),