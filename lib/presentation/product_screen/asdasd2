return Card(
                    margin: const EdgeInsets.only(bottom: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(12),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Product Image
                          ClipRRect(
                            borderRadius: BorderRadius.circular(12),
                            child: Image.network(
                              product['gambar_produk'] ?? '',
                              width: 80,
                              height: 80,
                              fit: BoxFit.cover,
                              errorBuilder: (context, error, stackTrace) => Container(
                                width: 80,
                                height: 80,
                                color: Colors.grey.shade200,
                                child: const Icon(Icons.image_not_supported),
                              ),
                            ),
                          ),

                          const SizedBox(width: 12),

                          // Product details
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  product['nama_produk'] ?? 'Unnamed Product',
                                  style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.bold,
                                  ),
                                  maxLines: 2,
                                  overflow: TextOverflow.ellipsis,
                                ),
                                const SizedBox(height: 4),
                                Text(
                                  'Rp ${_formatPrice(price)}',
                                  style: TextStyle(
                                    fontSize: 14,
                                    color: appTheme.orange200,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                                const SizedBox(height: 8),

                                // Quantity controls
                                Row(
                                  children: [
                                    InkWell(
                                      onTap: () {
                                        final currentQty = int.tryParse(quantityControllers[cartId]?.text ?? "1") ?? 1;
                                        if (currentQty > 1) {
                                          quantityControllers[cartId]?.text = (currentQty - 1).toString();
                                          updateQuantity(cartId, currentQty - 1, maxStock);
                                        }
                                      },
                                      child: Container(
                                        padding: const EdgeInsets.all(4),
                                        decoration: BoxDecoration(
                                          border: Border.all(color: Colors.grey.shade300),
                                          borderRadius: BorderRadius.circular(4),
                                        ),
                                        child: const Icon(Icons.remove, size: 16),
                                      ),
                                    ),

                                    // Quantity input field
                                    Container(
                                      width: 40,
                                      margin: const EdgeInsets.symmetric(horizontal: 8),
                                      child: TextField(
                                        controller: quantityControllers[cartId],
                                        keyboardType: TextInputType.number,
                                        textAlign: TextAlign.center,
                                        onChanged: (value) {
                                          final newQty = int.tryParse(value) ?? 0;
                                          if (newQty > 0) {
                                            updateQuantity(cartId, newQty, maxStock);
                                          }
                                        },
                                        decoration: InputDecoration(
                                          contentPadding: const EdgeInsets.symmetric(vertical: 8, horizontal: 4),
                                          border: const OutlineInputBorder(),
                                          enabledBorder: OutlineInputBorder(
                                            borderSide: BorderSide(color: appTheme.lightGrey), // warna abu-abu saat tidak fokus
                                          ),
                                          focusedBorder: OutlineInputBorder(
                                            borderSide: BorderSide(color: appTheme.lightGrey, width: 2.0), // warna abu-abu saat fokus
                                          ),
                                        ),
                                      ),
                                    ),

                                    InkWell(
                                      onTap: () {
                                        final currentQty = int.tryParse(quantityControllers[cartId]?.text ?? "1") ?? 1;
                                        if (currentQty < maxStock) {
                                          quantityControllers[cartId]?.text = (currentQty + 1).toString();
                                          updateQuantity(cartId, currentQty + 1, maxStock);
                                        }
                                      },
                                      child: Container(
                                        padding: const EdgeInsets.all(4),
                                        decoration: BoxDecoration(
                                          border: Border.all(color: Colors.grey.shade300),
                                          borderRadius: BorderRadius.circular(4),
                                        ),
                                        child: const Icon(Icons.add, size: 16),
                                      ),
                                    ),

                                    const Spacer(),

                                    // Delete button
                                    IconButton(
                                      onPressed: () => _showDeleteConfirmation(context, cartId),
                                      icon: Icon(Icons.delete_outline, color: appTheme.darkCherry),
                                    ),
                                  ],
                                ),

                                // Subtotal
                                Align(
                                  alignment: Alignment.centerRight,
                                  child: Text(
                                    'Subtotal: Rp ${_formatPrice(price * quantity)}',
                                    style: const TextStyle(
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ),